
        lightX = 2.5f * sin(glfwGetTime()*3.0f);
        lightY = 2.5f * cos(glfwGetTime()*3.0f);
        lightZ = 2.5f * cos(glfwGetTime()*1.0f);
        lightPos = glm::vec3(lightX, lightY, lightZ);
        lightingShader.setVec3("lightPos", lightPos);
        lightX = 4.5f * sin(glfwGetTime()*4.0f);
        lightY = 4.5f * cos(glfwGetTime()*4.0f);
        lightZ = 4.5f * cos(glfwGetTime()*2.0f);
        lightPos2 = glm::vec3(lightX, lightY, lightZ);
        lightingShader.setVec3("lightPos", lightPos2);
        
        
        glBindVertexArray(lightCubeVAO);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        model = glm::mat4(1.0f);
        model = glm::translate(model, lightPos2);
        model = glm::rotate(model, glm::radians(20.0f * (float)glfwGetTime()), glm::vec3(1.0f, 0.5f, 2.0f));
        model = glm::scale(model, glm::vec3(0.2f)); // a smaller cube
        lightCubeShader.setMat4("model", model);
        glBindVertexArray(lightCubeVAO);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        
        model = glm::mat4(1.0f);
        model = glm::translate(model, lightPos3);
        model = glm::rotate(model, glm::radians(20.0f * (float)glfwGetTime()), glm::vec3(1.0f, 0.5f, 2.0f));
        model = glm::scale(model, glm::vec3(0.2f)); // a smaller cube
        lightCubeShader.setMat4("model", model);
        glBindVertexArray(lightCubeVAO);
        glDrawArrays(GL_TRIANGLES, 0, 36);
